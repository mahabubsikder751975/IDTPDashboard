@* @model List<ICPServerIP>
@{
    ViewData["Title"] = "IDTP Server Monitor";
} *@


@* <div style="width: 50vw; height: 50vw;">
     <canvas id="f" style="width: 50vw; height: 50vw;"></canvas>
</div> *@

@* <div><canvas id="dh"></canvas></div>
<div><canvas id="dv"></canvas></div>
<div><canvas id="f"></canvas></div> *@

<div class="container">
    <canvas id="forceDirectedGraph"></canvas>
</div>

<script>  

var myChart;

createNetChart = function () {
                $.ajax({
                url: '/Home/GetICPNetChartData',
                type: 'POST',        
                dataType: 'json',
                contentType: 'application/json',
                success: function (icpdata) {     
                    originalpointcolor = new Array(icpdata.length).fill("#66ff00");
                    copiedpointcolor = JSON.parse(JSON.stringify(originalpointcolor));
                    createChart(icpdata, "forceDirectedGraph", "forceDirectedGraph", "vertical");
                }
            });
        };

createNetChart();

let originalpointcolor=[];
let copiedpointcolor;

function createChart(nodes, id, type, orientation) {    
  myChart=new Chart(document.getElementById(id).getContext("2d"), {
    type,
    data: {
      labels: nodes.map((d) => d.name),
      datasets: [
        {          
          pointRadius: 20,
          pointHoverRadius: 30,
          data: nodes.map((d) => Object.assign({}, d)),
          pointBackgroundColor: copiedpointcolor
        }
      ]
    },
    options: {
      dragData: true,
      dragX: true,
      tree: {
        orientation
      },
      layout: {
        padding: {
          top: 5,
          left: 5,
          right: 5,
          bottom: 5
        }
      },
      plugins: {
        tooltip:false,
        title: {
          display: true,
          text: ['ICP Network with IDTP Server',''],   
          padding: {
                    top: 10,
                    bottom: 30
                },                           
        },
        legend: {
          display: false
        },
        datalabels: {
          align: orientation === "vertical" ? "bottom" : "right",
          offset: 6,
          backgroundColor: "white",          
          formatter: (v) => {
            return v.name;
          }
        }
      },    
    animation: {
    onComplete: function() {
        let ctx = this.$context.chart.ctx;
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";        
        let chart = this;
        let datasets = this.config.data.datasets;
        let sum=new Array();
        datasets.forEach(function (dataset, i) {
            ctx.font = "Bold 16px Helvetica";
            switch ( chart.getDatasetMeta(i).type ) {
              case "forceDirectedGraph":
                    ctx.fillStyle = "#4E4E4C";                    
                    chart.getDatasetMeta(i).data.forEach(function (p, j) {
                        ctx.fillText(datasets[i].data[j].name, p.x, p.y);
                    });
                    break;
                case "line":
                    ctx.fillStyle = "Black";
                    chart.getDatasetMeta(i).data.forEach(function (p, j) {
                        ctx.fillText(datasets[i].data[j], p.x, p.y - 20);
                    });
                    break;
                case "bar":
                    ctx.fillStyle = "White";
                    chart.getDatasetMeta(i).data.forEach(function (p, j) {
                        ctx.fillText(datasets[i].label, p.x, p.y + 20);
                    });
                    break;
                case "horizontalBar":
                    ctx.fillStyle = "Black";
                    chart.getDatasetMeta(i).data.forEach(function (p, j) {
                    if (sum[j]== null) { sum[j] = 0; }
                    sum[j]=sum[j]+parseFloat(datasets[i].data[j]);
                    if (i==datasets.length-1) {ctx.fillText(sum[j], p.x+10, p.y);}

                    });

                    break;
            }
        });
    }
  }
  
    }
  });
}
Chart.defaults.font.family='Helvetica'
Chart.defaults.font.size=18

loadData = function () {

 $.ajax({
        url: '/Home/GetICPServerData',
        type: 'POST',        
        dataType: 'json',
        contentType: 'application/json',
        success: function (data) {     
            // loop through the All data and fill the dropdown
            $.each(data, function (index, item) {

              if(item.isHelloTested==false){
                myChart.config.data.datasets[0]['pointBackgroundColor'][index] = '#f2f1ed'; 
              }
              else{
                 myChart.config.data.datasets[0]['pointBackgroundColor'][index] = originalpointcolor[index];                
              }              


             // if(item.serverHeartbeat==false){
             //   myChart.config.data.datasets[item.serverRackId].backgroundColor[item.rackId]="#CC7722";                
             // }
             // else{
             //   myChart.config.data.datasets[item.serverRackId].backgroundColor[item.rackId]=copieddatasets[item.serverRackId].backgroundColor[item.rackId];                
             // }

            });  
            myChart.update();
                     
        }
    });
};

//loadData()

setInterval(function() {
    loadData()  
}, 5000);

 </script>
