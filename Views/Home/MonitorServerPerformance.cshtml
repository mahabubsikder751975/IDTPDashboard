 <style>
  .container{    
    vertical-align: middle;
    text-align: center;
  }

  .label{
    flex:1;
    vertical-align: middle;
    text-align: center;
  }

  h1{
    text-align: center;
  }

  </style>  

  <div id="labelAccel" class="label">
    <h2>Real Time Performance</h2>     
  </div>
  <div id="idcontents">
      Server Name: <select name="machine-names" id="machine-names"></select>
      
      <br/>
      <br/>

      <div id="perfContainer" class="container">                                              
          <div id="divcpu">
            <h4> CPU </h4>
            <canvas id="divcpuChart"></canvas>
          </div>
           <br/>
          <div id="divmemory">
            <h4> Memory </h4>
            <canvas id="divmemoryChart"></canvas>
          </div>
           <br/>
          <div id="divnetwork">
            <h4> Network </h4>
            <canvas id="divnetworkChart"></canvas>
          </div>
          <div id="divdisk">
            <h4> Disk </h4>
            <canvas id="divdiskChart"></canvas>
          </div>
           <br/>
        </div>
  </div>
  

<script>

$(document).ready(function() { 

    console.log("LOADED");


    //Configuration variables
    var updateInterval = 60000 //in ms
    var numberElements = 200;

    //Globals
    var updateCount = 0;

    // Chart Objects
    var divcpuChart = $("#divcpuChart");
    var divmemoryChart = $("#divmemoryChart");
    var divdiskChart = $("#divdiskChart");
    var divnetworkChart = $("#divnetworkChart");
    //chart instances & configuration


    var commonOptions = {
        scales: {
          xAxes: [{
            type: 'time',
            label: "%",
            time: {
              displayFormats: {
                millisecond: 'mm:ss:SSS'
              }
            }
          }],
            yAxes: [{
                label:"Time",
                display: true,
                ticks: {
                  min: 0,
                  max: 100,
                  //stepSize: 20

                    //beginAtZero:true,
                    //max:100,                    
                }
            }]            
        },
        legend: {display: false},
        tooltips:{
          enabled: false
        }
    };

    //var ctx = document.getElementById('myChart').getContext('2d');
    //var myChart = new Chart(ctx,config);

    var divcpuChartInstance = new Chart(divcpuChart, {
        type: 'line',
        data: {
          datasets: [{
              label: "% Utilization",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: "#01B8AA",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: "% Utilization",
            fontSize: 18
          }
        })
    });

    var divmemoryChartInstance = new Chart(divmemoryChart, {
        type: 'line',
        data: {
          datasets: [{
              label: "Memory Usage (GB)",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: "#01B8AA",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: "Memory Usage (GB)",
            fontSize: 18
          }
        })    });

    var divdiskChartInstance = new Chart(divdiskChart, {
        type: 'line',
        data: {
          datasets: [{
              label: "Disk Usage (GB)",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: "#01B8AA",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: "Disk Usage (GB)",
            fontSize: 18
          }
        })
      });

   var divnetworkChartInstance = new Chart(divnetworkChart, {
        type: 'line',
        data: {
          datasets: [{
              label: "Throughput (Kbps)",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: "#01B8AA",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: "Throughput (Kbps)",
            fontSize: 18
          }
        })
      });

    function removeData(){      
      
      divcpuChartInstance.config.data.labels=[];
      divmemoryChartInstance.config.data.labels=[];
      divdiskChartInstance.config.data.labels=[];
      divnetworkChartInstance.config.data.labels=[];

      divcpuChartInstance.update();
      divmemoryChartInstance.update();
      divdiskChartInstance.update();
      divnetworkChartInstance.update();
    }

    function addData(data) {
      if(data){
        const d = new Date(data['mCdate']);
        let time = d.getHours()+':'+d.getMinutes()+':'+d.getSeconds();
        @* let time = d.getHours()+':'+d.getMinutes()+':'+d.getSeconds(); *@
        $('#machineid').html("Server:"+data['machinename'])
        divcpuChartInstance.config.data.labels.push(time);
        divcpuChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['cpu'])});
        divmemoryChartInstance.config.data.labels.push(time);
        divmemoryChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['memoryused'])});
        divdiskChartInstance.config.data.labels.push(time);
        divdiskChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['diskused'])});
        divnetworkChartInstance.config.data.labels.push(time);
        divnetworkChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['networkused'])});
        

        divcpuChartInstance.update();
        divmemoryChartInstance.update();
        divdiskChartInstance.update();
        divnetworkChartInstance.update();

        if(updateCount > numberElements){
          divcpuChartInstance.config.data.labels.shift();
          divcpuChartInstance.config.data.datasets[0].data.shift();
          divmemoryChartInstance.config.data.labels.shift();
          divmemoryChartInstance.config.data.datasets[0].data.shift();
          divdiskChartInstance.config.data.labels.shift();
          divdiskChartInstance.config.data.datasets[0].data.shift();   
          divnetworkChartInstance.config.data.labels.shift();
          divnetworkChartInstance.config.data.datasets[0].data.shift();       
        }
        else updateCount++;       
      }
    };
    function updateData(macname) {
      console.log("Update Data"); 
      $.post('GetServerPerfData', { machinename: macname}, 
      function(icpdata){
          removeData();
           //Globals
          var updateCount = 0;
          if(icpdata!='undefined'){
            if(icpdata.length>0){
              icpdata.forEach(obj => {
                  addData(obj);
              })}
              
            }
      });      
//      setTimeout(updateData,updateInterval);
    }
    

    function AddMachineDropDownList() {        
            //Create a DropDownList element.
            var ddlCustomers = document.getElementById("machine-names");
            var customers;
            //Build an array containing machine name records.
             $.post('GetMachinesName', {}, 
                function(icpdata){
                
                  if(icpdata!='undefined'){
                        icpdata.forEach(obj => {
                        var option = document.createElement("OPTION");
                        
                        //Set Customer Name in Text part.
                        option.innerHTML = obj["machineName"];

                        //Set CustomerId in Value part.
                        option.value = obj["id"];

                        //Add the Option element to DropDownList.
                        ddlCustomers.options.add(option);                        
                    })
                    ddlCustomers.value=1;
                    updateData(icpdata[0].machineName);
                  }
                  

                  });                                         
    }    

    AddMachineDropDownList();      

    $("#machine-names").on("change",function () {
                numberElements = 0;
                updateData($("#machine-names option:selected").text());
      });             

});  

</script>
