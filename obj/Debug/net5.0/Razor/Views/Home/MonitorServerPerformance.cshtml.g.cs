#pragma checksum "E:\IDTPDashboard\Views\Home\MonitorServerPerformance.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c684626e5ba4cb8f727197c68cacaf5d1b71c2c1"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_MonitorServerPerformance), @"mvc.1.0.view", @"/Views/Home/MonitorServerPerformance.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\IDTPDashboard\Views\_ViewImports.cshtml"
using IDTPDashboards;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\IDTPDashboard\Views\_ViewImports.cshtml"
using IDTPDashboards.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c684626e5ba4cb8f727197c68cacaf5d1b71c2c1", @"/Views/Home/MonitorServerPerformance.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1de202496fa847446cb7ebfb3e3a55cf1c7d1a5e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_MonitorServerPerformance : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@" <style>
  .container{    
    vertical-align: middle;
    text-align: center;
  }

  .label{
    flex:1;
    vertical-align: middle;
    text-align: center;
  }

  h1{
    text-align: center;
  }

  </style>  

  <div id=""labelAccel"" class=""label"">
    <h2>Real Time Performance</h2>     
  </div>
  <div id=""idcontents"">
      Server Name: <select name=""machine-names"" id=""machine-names""></select>
      
      <br/>
      <br/>

      <div id=""perfContainer"" class=""container"">                                              
          <div id=""divcpu"">
            <h4> CPU </h4>
            <canvas id=""divcpuChart""></canvas>
          </div>
           <br/>
          <div id=""divmemory"">
            <h4> Memory </h4>
            <canvas id=""divmemoryChart""></canvas>
          </div>
           <br/>
          <div id=""divdisk"">
            <h4> Disk </h4>
            <canvas id=""divdiskChart""></canvas>
          </div>
           <br/>
          <div id=""divnetwork"">
            <h4> Network </h4>
            <c");
            WriteLiteral(@"anvas id=""divnetworkChart""></canvas>
          </div>
        </div>
  </div>
  

<script>

$(document).ready(function() { 

    console.log(""LOADED"");


    //Configuration variables
    var updateInterval = 60000 //in ms
    var numberElements = 200;

    //Globals
    var updateCount = 0;

    // Chart Objects
    var divcpuChart = $(""#divcpuChart"");
    var divmemoryChart = $(""#divmemoryChart"");
    var divdiskChart = $(""#divdiskChart"");
    var divnetworkChart = $(""#divnetworkChart"");
    //chart instances & configuration


    var commonOptions = {
        scales: {
          xAxes: [{
            type: 'time',
            label: ""%"",
            time: {
              displayFormats: {
                millisecond: 'mm:ss:SSS'
              }
            }
          }],
            yAxes: [{
                label:""Time"",
                ticks: {
                    beginAtZero:true
                }
            }]            
        },
        legend: {display: false},
        tooltips:{
          enabl");
            WriteLiteral(@"ed: false
        }
    };

    //var ctx = document.getElementById('myChart').getContext('2d');
    //var myChart = new Chart(ctx,config);

    var divcpuChartInstance = new Chart(divcpuChart, {
        type: 'line',
        data: {
          datasets: [{
              label: ""% Utilization"",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: ""#01B8AA"",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: ""% Utilization"",
            fontSize: 18
          }
        })
    });

    var divmemoryChartInstance = new Chart(divmemoryChart, {
        type: 'line',
        data: {
          datasets: [{
              label: ""% Utilization"",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: ""#01B8AA"",
          }]
        },
        opti");
            WriteLiteral(@"ons: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: ""% Utilization"",
            fontSize: 18
          }
        })    });

    var divdiskChartInstance = new Chart(divdiskChart, {
        type: 'line',
        data: {
          datasets: [{
              label: ""% Utilization"",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: ""#01B8AA"",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: ""% Utilization"",
            fontSize: 18
          }
        })
      });

   var divnetworkChartInstance = new Chart(divnetworkChart, {
        type: 'line',
        data: {
          datasets: [{
              label: ""% Utilization"",
              data: 0,
              fill: false,
              borderColor: '#343e9a',
              borderWidth: 1,
              backgroundColor: ""#01B8A");
            WriteLiteral(@"A"",
          }]
        },
        options: Object.assign({}, commonOptions, {
          title:{
            display: true,
            text: ""% Utilization"",
            fontSize: 18
          }
        })
      });

    function removeData(){      
      
      divcpuChartInstance.config.data.labels=[];
      divmemoryChartInstance.config.data.labels=[];
      divdiskChartInstance.config.data.labels=[];
      divnetworkChartInstance.config.data.labels=[];

      divcpuChartInstance.update();
      divmemoryChartInstance.update();
      divdiskChartInstance.update();
      divnetworkChartInstance.update();
    }

    function addData(data) {
      if(data){
        const d = new Date(data['mCdate']);
        let time = d.getHours()+':'+d.getMinutes()+':'+d.getSeconds();
        $('#machineid').html(""Server:""+data['machinename'])
        divcpuChartInstance.config.data.labels.push(time);
        divcpuChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['cpu'])});
        divmemoryC");
            WriteLiteral(@"hartInstance.config.data.labels.push(time);
        divmemoryChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['memory'])});
        divdiskChartInstance.config.data.labels.push(time);
        divdiskChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['disk'])});
        divnetworkChartInstance.config.data.labels.push(time);
        divnetworkChartInstance.config.data.datasets.forEach((dataset) =>{dataset.data.push(data['network'])});
        

        divcpuChartInstance.update();
        divmemoryChartInstance.update();
        divdiskChartInstance.update();
        divnetworkChartInstance.update();

        if(updateCount > numberElements){
          divcpuChartInstance.config.data.labels.shift();
          divcpuChartInstance.config.data.datasets[0].data.shift();
          divmemoryChartInstance.config.data.labels.shift();
          divmemoryChartInstance.config.data.datasets[0].data.shift();
          divdiskChartInstance.config.data.labels.shift();");
            WriteLiteral(@"
          divdiskChartInstance.config.data.datasets[0].data.shift();   
          divnetworkChartInstance.config.data.labels.shift();
          divnetworkChartInstance.config.data.datasets[0].data.shift();       
        }
        else updateCount++;       
      }
    };
    function updateData(macname) {
      console.log(""Update Data""); 
      $.post('GetServerPerfData', { machinename: macname}, 
      function(icpdata){
          removeData();
          if(icpdata!='undefined'){
            if(icpdata.length>0){
              icpdata.forEach(obj => {
                  addData(obj);
              })}
              
            }
      });      
//      setTimeout(updateData,updateInterval);
    }
    

    function AddMachineDropDownList() {        
            //Create a DropDownList element.
            var ddlCustomers = document.getElementById(""machine-names"");
            var customers;
            //Build an array containing machine name records.
             $.post('GetMachinesName', {}, 
         ");
            WriteLiteral(@"       function(icpdata){
                
                  if(icpdata!='undefined'){
                        icpdata.forEach(obj => {
                        var option = document.createElement(""OPTION"");
                        
                        //Set Customer Name in Text part.
                        option.innerHTML = obj[""machineName""];

                        //Set CustomerId in Value part.
                        option.value = obj[""id""];

                        //Add the Option element to DropDownList.
                        ddlCustomers.options.add(option);                        
                    })
                    ddlCustomers.value=1;
                    updateData(icpdata[0].machineName);
                  }
                  

                  });                                         
    }    

    AddMachineDropDownList();      

    $(""#machine-names"").on(""change"",function () {
                updateData($(""#machine-names option:selected"").text());
      });            ");
            WriteLiteral(" \n\n});  \n\n</script>\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
